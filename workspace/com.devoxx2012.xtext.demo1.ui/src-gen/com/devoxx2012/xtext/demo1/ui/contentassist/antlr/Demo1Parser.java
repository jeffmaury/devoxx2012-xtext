/*
* generated by Xtext
*/
package com.devoxx2012.xtext.demo1.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.devoxx2012.xtext.demo1.services.Demo1GrammarAccess;

public class Demo1Parser extends AbstractContentAssistParser {
	
	@Inject
	private Demo1GrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.devoxx2012.xtext.demo1.ui.contentassist.antlr.internal.InternalDemo1Parser createParser() {
		com.devoxx2012.xtext.demo1.ui.contentassist.antlr.internal.InternalDemo1Parser result = new com.devoxx2012.xtext.demo1.ui.contentassist.antlr.internal.InternalDemo1Parser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getRuleAccess().getNextAlternatives_1_1_0(), "rule__Rule__NextAlternatives_1_1_0");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getCategoryAccess().getGroup(), "rule__Category__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getRuleAccess().getGroup_1(), "rule__Rule__Group_1__0");
					put(grammarAccess.getRuleExpressionAccess().getGroup(), "rule__RuleExpression__Group__0");
					put(grammarAccess.getTestExpressionAccess().getGroup(), "rule__TestExpression__Group__0");
					put(grammarAccess.getRatioExpressionAccess().getGroup(), "rule__RatioExpression__Group__0");
					put(grammarAccess.getModelAccess().getCategoriesAssignment_0(), "rule__Model__CategoriesAssignment_0");
					put(grammarAccess.getModelAccess().getRuleAssignment_1(), "rule__Model__RuleAssignment_1");
					put(grammarAccess.getCategoryAccess().getNameAssignment_1(), "rule__Category__NameAssignment_1");
					put(grammarAccess.getRuleAccess().getFirstAssignment_0(), "rule__Rule__FirstAssignment_0");
					put(grammarAccess.getRuleAccess().getNextAssignment_1_1(), "rule__Rule__NextAssignment_1_1");
					put(grammarAccess.getRuleExpressionAccess().getTestAssignment_1(), "rule__RuleExpression__TestAssignment_1");
					put(grammarAccess.getRuleExpressionAccess().getRatioAssignment_3(), "rule__RuleExpression__RatioAssignment_3");
					put(grammarAccess.getTestExpressionAccess().getCategoryAssignment_2(), "rule__TestExpression__CategoryAssignment_2");
					put(grammarAccess.getRatioExpressionAccess().getRatioAssignment_2(), "rule__RatioExpression__RatioAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.devoxx2012.xtext.demo1.ui.contentassist.antlr.internal.InternalDemo1Parser typedParser = (com.devoxx2012.xtext.demo1.ui.contentassist.antlr.internal.InternalDemo1Parser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public Demo1GrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(Demo1GrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
