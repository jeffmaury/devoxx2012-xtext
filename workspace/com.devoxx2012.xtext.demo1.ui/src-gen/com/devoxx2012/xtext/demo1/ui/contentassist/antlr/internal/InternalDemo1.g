/*
* generated by Xtext
*/
grammar InternalDemo1;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.devoxx2012.xtext.demo1.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.devoxx2012.xtext.demo1.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.devoxx2012.xtext.demo1.services.Demo1GrammarAccess;

}

@parser::members {
 
 	private Demo1GrammarAccess grammarAccess;
 	
    public void setGrammarAccess(Demo1GrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleCategory
entryRuleCategory 
:
{ before(grammarAccess.getCategoryRule()); }
	 ruleCategory
{ after(grammarAccess.getCategoryRule()); } 
	 EOF 
;

// Rule Category
ruleCategory
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getCategoryAccess().getGroup()); }
(rule__Category__Group__0)
{ after(grammarAccess.getCategoryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getGroup()); }
(rule__Rule__Group__0)
{ after(grammarAccess.getRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRuleExpression
entryRuleRuleExpression 
:
{ before(grammarAccess.getRuleExpressionRule()); }
	 ruleRuleExpression
{ after(grammarAccess.getRuleExpressionRule()); } 
	 EOF 
;

// Rule RuleExpression
ruleRuleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleExpressionAccess().getGroup()); }
(rule__RuleExpression__Group__0)
{ after(grammarAccess.getRuleExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTestExpression
entryRuleTestExpression 
:
{ before(grammarAccess.getTestExpressionRule()); }
	 ruleTestExpression
{ after(grammarAccess.getTestExpressionRule()); } 
	 EOF 
;

// Rule TestExpression
ruleTestExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTestExpressionAccess().getGroup()); }
(rule__TestExpression__Group__0)
{ after(grammarAccess.getTestExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRatioExpression
entryRuleRatioExpression 
:
{ before(grammarAccess.getRatioExpressionRule()); }
	 ruleRatioExpression
{ after(grammarAccess.getRatioExpressionRule()); } 
	 EOF 
;

// Rule RatioExpression
ruleRatioExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRatioExpressionAccess().getGroup()); }
(rule__RatioExpression__Group__0)
{ after(grammarAccess.getRatioExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Rule__NextAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getNextRuleParserRuleCall_1_1_0_0()); }
	ruleRule
{ after(grammarAccess.getRuleAccess().getNextRuleParserRuleCall_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getRuleAccess().getNextRatioExpressionParserRuleCall_1_1_0_1()); }
	ruleRatioExpression
{ after(grammarAccess.getRuleAccess().getNextRatioExpressionParserRuleCall_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getModelAccess().getCategoriesAssignment_0()); }
(rule__Model__CategoriesAssignment_0)
{ after(grammarAccess.getModelAccess().getCategoriesAssignment_0()); }
)
(
{ before(grammarAccess.getModelAccess().getCategoriesAssignment_0()); }
(rule__Model__CategoriesAssignment_0)*
{ after(grammarAccess.getModelAccess().getCategoriesAssignment_0()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRuleAssignment_1()); }
(rule__Model__RuleAssignment_1)
{ after(grammarAccess.getModelAccess().getRuleAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Category__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Category__Group__0__Impl
	rule__Category__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Category__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCategoryAccess().getCategoryKeyword_0()); }

	'category' 

{ after(grammarAccess.getCategoryAccess().getCategoryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Category__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Category__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Category__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCategoryAccess().getNameAssignment_1()); }
(rule__Category__NameAssignment_1)
{ after(grammarAccess.getCategoryAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Rule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getFirstAssignment_0()); }
(rule__Rule__FirstAssignment_0)
{ after(grammarAccess.getRuleAccess().getFirstAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getGroup_1()); }
(rule__Rule__Group_1__0)?
{ after(grammarAccess.getRuleAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Rule__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_1__0__Impl
	rule__Rule__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getElseKeyword_1_0()); }

	'else' 

{ after(grammarAccess.getRuleAccess().getElseKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getNextAssignment_1_1()); }
(rule__Rule__NextAssignment_1_1)
{ after(grammarAccess.getRuleAccess().getNextAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RuleExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleExpression__Group__0__Impl
	rule__RuleExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleExpressionAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getRuleExpressionAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleExpression__Group__1__Impl
	rule__RuleExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleExpressionAccess().getTestAssignment_1()); }
(rule__RuleExpression__TestAssignment_1)
{ after(grammarAccess.getRuleExpressionAccess().getTestAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleExpression__Group__2__Impl
	rule__RuleExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleExpressionAccess().getThenKeyword_2()); }

	'then' 

{ after(grammarAccess.getRuleExpressionAccess().getThenKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RuleExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RuleExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RuleExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleExpressionAccess().getRatioAssignment_3()); }
(rule__RuleExpression__RatioAssignment_3)
{ after(grammarAccess.getRuleExpressionAccess().getRatioAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__TestExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group__0__Impl
	rule__TestExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getCategoryKeyword_0()); }

	'category' 

{ after(grammarAccess.getTestExpressionAccess().getCategoryKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group__1__Impl
	rule__TestExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getIsKeyword_1()); }

	'is' 

{ after(grammarAccess.getTestExpressionAccess().getIsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TestExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TestExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getCategoryAssignment_2()); }
(rule__TestExpression__CategoryAssignment_2)
{ after(grammarAccess.getTestExpressionAccess().getCategoryAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__RatioExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RatioExpression__Group__0__Impl
	rule__RatioExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RatioExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRatioExpressionAccess().getRatioKeyword_0()); }

	'ratio' 

{ after(grammarAccess.getRatioExpressionAccess().getRatioKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RatioExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RatioExpression__Group__1__Impl
	rule__RatioExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RatioExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRatioExpressionAccess().getIsKeyword_1()); }

	'is' 

{ after(grammarAccess.getRatioExpressionAccess().getIsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RatioExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RatioExpression__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RatioExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRatioExpressionAccess().getRatioAssignment_2()); }
(rule__RatioExpression__RatioAssignment_2)
{ after(grammarAccess.getRatioExpressionAccess().getRatioAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__CategoriesAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getCategoriesCategoryParserRuleCall_0_0()); }
	ruleCategory{ after(grammarAccess.getModelAccess().getCategoriesCategoryParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__RuleAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getRuleRuleParserRuleCall_1_0()); }
	ruleRule{ after(grammarAccess.getModelAccess().getRuleRuleParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Category__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCategoryAccess().getNameIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getCategoryAccess().getNameIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__FirstAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getFirstRuleExpressionParserRuleCall_0_0()); }
	ruleRuleExpression{ after(grammarAccess.getRuleAccess().getFirstRuleExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__NextAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getNextAlternatives_1_1_0()); }
(rule__Rule__NextAlternatives_1_1_0)
{ after(grammarAccess.getRuleAccess().getNextAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleExpression__TestAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleExpressionAccess().getTestTestExpressionParserRuleCall_1_0()); }
	ruleTestExpression{ after(grammarAccess.getRuleExpressionAccess().getTestTestExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RuleExpression__RatioAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleExpressionAccess().getRatioRatioExpressionParserRuleCall_3_0()); }
	ruleRatioExpression{ after(grammarAccess.getRuleExpressionAccess().getRatioRatioExpressionParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TestExpression__CategoryAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTestExpressionAccess().getCategoryCategoryCrossReference_2_0()); }
(
{ before(grammarAccess.getTestExpressionAccess().getCategoryCategoryIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getTestExpressionAccess().getCategoryCategoryIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getTestExpressionAccess().getCategoryCategoryCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RatioExpression__RatioAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRatioExpressionAccess().getRatioINTTerminalRuleCall_2_0()); }
	RULE_INT{ after(grammarAccess.getRatioExpressionAccess().getRatioINTTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


