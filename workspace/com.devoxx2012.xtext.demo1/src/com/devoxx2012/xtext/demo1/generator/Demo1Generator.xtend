/*
 * generated by Xtext
 */
package com.devoxx2012.xtext.demo1.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import com.devoxx2012.xtext.demo1.demo1.Model
import com.devoxx2012.xtext.demo1.demo1.Rule
import com.devoxx2012.xtext.demo1.demo1.TestExpression
import com.devoxx2012.xtext.demo1.demo1.RatioExpression

class Demo1Generator implements IGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		fsa.generateFile(resource.className + ".java", toJavaCode(resource.contents.head as Model))
	}
	
	def className(Resource res) {
		var name = res.URI.lastSegment
		return name.substring(0, name.indexOf('.'))
	}
	
	def toJavaCode(Model m) '''
	  public class «m.eResource.className» {
	  	public int ratio(String category) {
	  	  int ratio = 0;
	  	  
	  	  «toJava(m.rule)»
	  	  return ratio;
	  	}
	  	
	  	public static void main(String[] args) {
	  	  new «m.eResource.className»().ratio(args[0]);
	  	}	
	  }
	'''
	
	def dispatch toJava(Rule rule) '''
	  «toJava(rule.first.test)»
	  «toJava(rule.first.ratio)»
	  }
	  «IF rule.next != null»
	  else «toJava(rule.next)»
	  «ENDIF»
	'''
	
	def toJava(TestExpression expr) '''
	  if (category.equals("«expr.category.name»")) {
	'''

	def dispatch toJava(RatioExpression r) '''
	  ratio = «r.ratio»;
	'''

}
