/*
* generated by Xtext
*/

package com.devoxx2012.xtext.demo1.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class Demo1GrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCategoriesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCategoriesCategoryParserRuleCall_0_0 = (RuleCall)cCategoriesAssignment_0.eContents().get(0);
		private final Assignment cRuleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRuleRuleParserRuleCall_1_0 = (RuleCall)cRuleAssignment_1.eContents().get(0);
		
		//Model:
		//	categories+=Category+ rule=Rule;
		public ParserRule getRule() { return rule; }

		//categories+=Category+ rule=Rule
		public Group getGroup() { return cGroup; }

		//categories+=Category+
		public Assignment getCategoriesAssignment_0() { return cCategoriesAssignment_0; }

		//Category
		public RuleCall getCategoriesCategoryParserRuleCall_0_0() { return cCategoriesCategoryParserRuleCall_0_0; }

		//rule=Rule
		public Assignment getRuleAssignment_1() { return cRuleAssignment_1; }

		//Rule
		public RuleCall getRuleRuleParserRuleCall_1_0() { return cRuleRuleParserRuleCall_1_0; }
	}

	public class CategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Category");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Category:
		//	"category" name=ID;
		public ParserRule getRule() { return rule; }

		//"category" name=ID
		public Group getGroup() { return cGroup; }

		//"category"
		public Keyword getCategoryKeyword_0() { return cCategoryKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class RuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Rule");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstRuleExpressionParserRuleCall_0_0 = (RuleCall)cFirstAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cElseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cNextAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cNextAlternatives_1_1_0 = (Alternatives)cNextAssignment_1_1.eContents().get(0);
		private final RuleCall cNextRuleParserRuleCall_1_1_0_0 = (RuleCall)cNextAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cNextRatioExpressionParserRuleCall_1_1_0_1 = (RuleCall)cNextAlternatives_1_1_0.eContents().get(1);
		
		//Rule:
		//	first=RuleExpression ("else" next=(Rule | RatioExpression))?;
		public ParserRule getRule() { return rule; }

		//first=RuleExpression ("else" next=(Rule | RatioExpression))?
		public Group getGroup() { return cGroup; }

		//first=RuleExpression
		public Assignment getFirstAssignment_0() { return cFirstAssignment_0; }

		//RuleExpression
		public RuleCall getFirstRuleExpressionParserRuleCall_0_0() { return cFirstRuleExpressionParserRuleCall_0_0; }

		//("else" next=(Rule | RatioExpression))?
		public Group getGroup_1() { return cGroup_1; }

		//"else"
		public Keyword getElseKeyword_1_0() { return cElseKeyword_1_0; }

		//next=(Rule | RatioExpression)
		public Assignment getNextAssignment_1_1() { return cNextAssignment_1_1; }

		//Rule | RatioExpression
		public Alternatives getNextAlternatives_1_1_0() { return cNextAlternatives_1_1_0; }

		//Rule
		public RuleCall getNextRuleParserRuleCall_1_1_0_0() { return cNextRuleParserRuleCall_1_1_0_0; }

		//RatioExpression
		public RuleCall getNextRatioExpressionParserRuleCall_1_1_0_1() { return cNextRatioExpressionParserRuleCall_1_1_0_1; }
	}

	public class RuleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RuleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTestAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTestTestExpressionParserRuleCall_1_0 = (RuleCall)cTestAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRatioAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRatioRatioExpressionParserRuleCall_3_0 = (RuleCall)cRatioAssignment_3.eContents().get(0);
		
		//RuleExpression:
		//	"if" test=TestExpression "then" ratio=RatioExpression;
		public ParserRule getRule() { return rule; }

		//"if" test=TestExpression "then" ratio=RatioExpression
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//test=TestExpression
		public Assignment getTestAssignment_1() { return cTestAssignment_1; }

		//TestExpression
		public RuleCall getTestTestExpressionParserRuleCall_1_0() { return cTestTestExpressionParserRuleCall_1_0; }

		//"then"
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }

		//ratio=RatioExpression
		public Assignment getRatioAssignment_3() { return cRatioAssignment_3; }

		//RatioExpression
		public RuleCall getRatioRatioExpressionParserRuleCall_3_0() { return cRatioRatioExpressionParserRuleCall_3_0; }
	}

	public class TestExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TestExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCategoryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cCategoryCategoryCrossReference_2_0 = (CrossReference)cCategoryAssignment_2.eContents().get(0);
		private final RuleCall cCategoryCategoryIDTerminalRuleCall_2_0_1 = (RuleCall)cCategoryCategoryCrossReference_2_0.eContents().get(1);
		
		//TestExpression:
		//	"category" "is" category=[Category];
		public ParserRule getRule() { return rule; }

		//"category" "is" category=[Category]
		public Group getGroup() { return cGroup; }

		//"category"
		public Keyword getCategoryKeyword_0() { return cCategoryKeyword_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//category=[Category]
		public Assignment getCategoryAssignment_2() { return cCategoryAssignment_2; }

		//[Category]
		public CrossReference getCategoryCategoryCrossReference_2_0() { return cCategoryCategoryCrossReference_2_0; }

		//ID
		public RuleCall getCategoryCategoryIDTerminalRuleCall_2_0_1() { return cCategoryCategoryIDTerminalRuleCall_2_0_1; }
	}

	public class RatioExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RatioExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRatioKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRatioAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRatioINTTerminalRuleCall_2_0 = (RuleCall)cRatioAssignment_2.eContents().get(0);
		
		//RatioExpression:
		//	"ratio" "is" ratio=INT;
		public ParserRule getRule() { return rule; }

		//"ratio" "is" ratio=INT
		public Group getGroup() { return cGroup; }

		//"ratio"
		public Keyword getRatioKeyword_0() { return cRatioKeyword_0; }

		//"is"
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//ratio=INT
		public Assignment getRatioAssignment_2() { return cRatioAssignment_2; }

		//INT
		public RuleCall getRatioINTTerminalRuleCall_2_0() { return cRatioINTTerminalRuleCall_2_0; }
	}
	
	
	private ModelElements pModel;
	private CategoryElements pCategory;
	private RuleElements pRule;
	private RuleExpressionElements pRuleExpression;
	private TestExpressionElements pTestExpression;
	private RatioExpressionElements pRatioExpression;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public Demo1GrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	categories+=Category+ rule=Rule;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Category:
	//	"category" name=ID;
	public CategoryElements getCategoryAccess() {
		return (pCategory != null) ? pCategory : (pCategory = new CategoryElements());
	}
	
	public ParserRule getCategoryRule() {
		return getCategoryAccess().getRule();
	}

	//Rule:
	//	first=RuleExpression ("else" next=(Rule | RatioExpression))?;
	public RuleElements getRuleAccess() {
		return (pRule != null) ? pRule : (pRule = new RuleElements());
	}
	
	public ParserRule getRuleRule() {
		return getRuleAccess().getRule();
	}

	//RuleExpression:
	//	"if" test=TestExpression "then" ratio=RatioExpression;
	public RuleExpressionElements getRuleExpressionAccess() {
		return (pRuleExpression != null) ? pRuleExpression : (pRuleExpression = new RuleExpressionElements());
	}
	
	public ParserRule getRuleExpressionRule() {
		return getRuleExpressionAccess().getRule();
	}

	//TestExpression:
	//	"category" "is" category=[Category];
	public TestExpressionElements getTestExpressionAccess() {
		return (pTestExpression != null) ? pTestExpression : (pTestExpression = new TestExpressionElements());
	}
	
	public ParserRule getTestExpressionRule() {
		return getTestExpressionAccess().getRule();
	}

	//RatioExpression:
	//	"ratio" "is" ratio=INT;
	public RatioExpressionElements getRatioExpressionAccess() {
		return (pRatioExpression != null) ? pRatioExpression : (pRatioExpression = new RatioExpressionElements());
	}
	
	public ParserRule getRatioExpressionRule() {
		return getRatioExpressionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
