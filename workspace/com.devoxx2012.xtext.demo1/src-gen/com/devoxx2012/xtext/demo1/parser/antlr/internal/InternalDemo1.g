/*
* generated by Xtext
*/
grammar InternalDemo1;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.devoxx2012.xtext.demo1.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.devoxx2012.xtext.demo1.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.devoxx2012.xtext.demo1.services.Demo1GrammarAccess;

}

@parser::members {

 	private Demo1GrammarAccess grammarAccess;
 	
    public InternalDemo1Parser(TokenStream input, Demo1GrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected Demo1GrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getCategoriesCategoryParserRuleCall_0_0()); 
	    }
		lv_categories_0_0=ruleCategory		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"categories",
        		lv_categories_0_0, 
        		"Category");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRuleRuleParserRuleCall_1_0()); 
	    }
		lv_rule_1_0=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"rule",
        		lv_rule_1_0, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCategory
entryRuleCategory returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCategoryRule()); }
	 iv_ruleCategory=ruleCategory 
	 { $current=$iv_ruleCategory.current; } 
	 EOF 
;

// Rule Category
ruleCategory returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='category' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getCategoryAccess().getCategoryKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getCategoryAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCategoryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleRule
entryRuleRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleRule()); }
	 iv_ruleRule=ruleRule 
	 { $current=$iv_ruleRule.current; } 
	 EOF 
;

// Rule Rule
ruleRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getFirstRuleExpressionParserRuleCall_0_0()); 
	    }
		lv_first_0_0=ruleRuleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"first",
        		lv_first_0_0, 
        		"RuleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='else' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRuleAccess().getElseKeyword_1_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getNextRuleParserRuleCall_1_1_0_0()); 
	    }
		lv_next_2_1=ruleRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"next",
        		lv_next_2_1, 
        		"Rule");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRuleAccess().getNextRatioExpressionParserRuleCall_1_1_0_1()); 
	    }
		lv_next_2_2=ruleRatioExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleRule());
	        }
       		set(
       			$current, 
       			"next",
        		lv_next_2_2, 
        		"RatioExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
))?)
;





// Entry rule entryRuleRuleExpression
entryRuleRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRuleExpressionRule()); }
	 iv_ruleRuleExpression=ruleRuleExpression 
	 { $current=$iv_ruleRuleExpression.current; } 
	 EOF 
;

// Rule RuleExpression
ruleRuleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='if' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRuleExpressionAccess().getIfKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleExpressionAccess().getTestTestExpressionParserRuleCall_1_0()); 
	    }
		lv_test_1_0=ruleTestExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleExpressionRule());
	        }
       		set(
       			$current, 
       			"test",
        		lv_test_1_0, 
        		"TestExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='then' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getRuleExpressionAccess().getThenKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRuleExpressionAccess().getRatioRatioExpressionParserRuleCall_3_0()); 
	    }
		lv_ratio_3_0=ruleRatioExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRuleExpressionRule());
	        }
       		set(
       			$current, 
       			"ratio",
        		lv_ratio_3_0, 
        		"RatioExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleTestExpression
entryRuleTestExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTestExpressionRule()); }
	 iv_ruleTestExpression=ruleTestExpression 
	 { $current=$iv_ruleTestExpression.current; } 
	 EOF 
;

// Rule TestExpression
ruleTestExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='category' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTestExpressionAccess().getCategoryKeyword_0());
    }
	otherlv_1='is' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTestExpressionAccess().getIsKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTestExpressionRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getTestExpressionAccess().getCategoryCategoryCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleRatioExpression
entryRuleRatioExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRatioExpressionRule()); }
	 iv_ruleRatioExpression=ruleRatioExpression 
	 { $current=$iv_ruleRatioExpression.current; } 
	 EOF 
;

// Rule RatioExpression
ruleRatioExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='ratio' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getRatioExpressionAccess().getRatioKeyword_0());
    }
	otherlv_1='is' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getRatioExpressionAccess().getIsKeyword_1());
    }
(
(
		lv_ratio_2_0=RULE_INT
		{
			newLeafNode(lv_ratio_2_0, grammarAccess.getRatioExpressionAccess().getRatioINTTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getRatioExpressionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"ratio",
        		lv_ratio_2_0, 
        		"INT");
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


