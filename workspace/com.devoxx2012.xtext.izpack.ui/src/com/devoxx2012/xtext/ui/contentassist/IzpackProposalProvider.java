/*
* generated by Xtext
*/
package com.devoxx2012.xtext.ui.contentassist;

import javax.inject.Inject;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.common.types.access.IJvmTypeProvider;
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider;
import org.eclipse.xtext.common.types.xtext.ui.TypeMatchFilters;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

import com.devoxx2012.xtext.izpack.IzpackPackage;
import com.devoxx2012.xtext.izpack.Packaging;
import com.devoxx2012.xtext.ui.contentassist.AbstractIzpackProposalProvider;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class IzpackProposalProvider extends AbstractIzpackProposalProvider {

	private static final String[] panels = {
	    "HelloPanel",
	    "HTMLHelloPanel",
	    "CheckedHelloPanel",
	    "InfoPanel",
	    "HTMLInfoPanel",
	    "LicencePanel",
	    "HTMLLicencePanel",
	    "PacksPanel",
	    "ImgPacksPanel",
	    "TreePacksPanel",
	    "TargetPanel",
	    "DefaultTargetPanel",
	    "InstallPanel",
	    "XInfoPanel",
	    "FinishPanel",
	    "SimpleFinishPanel",
	    "ShortcutPanel",
	    "UserInputPanel",
	    "CompilePanel",
	    "ProcessPanel",
	    "JDKPathPanel",
	    "SelectPrinterPanel",
	    "DataCheckPanel",
	    "SummaryPanel",
	    "InstallationGroupPanel",
	    "UserPathPanel"
	};
	
	@Inject
	private IJvmTypeProvider.Factory      jvmTypeProviderFactory;
	
	@Inject
	private ITypesProposalProvider        typeProposalProvider;

	@Override
	public void completeJvmParameterizedTypeReference_Type(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		// TODO Auto-generated method stub
		if (EcoreUtil2.getContainerOfType(model, Packaging.class) != null) {
			final IJvmTypeProvider jvmTypeProvider = jvmTypeProviderFactory.createTypeProvider(model.eResource().getResourceSet());
			final JvmType interfaceToImplement = jvmTypeProvider.findTypeByName("com.izforge.izpack.compiler.IPackager");
			typeProposalProvider.createSubTypeProposals(interfaceToImplement, this, context, IzpackPackage.Literals.PACKAGING__CLASS, TypeMatchFilters.canInstantiate(), acceptor);
			
		} else {
			super.completeJvmParameterizedTypeReference_Type(model, assignment, context, acceptor);
		}
				
	}

	@Override
	public void complete_Panel(EObject model, RuleCall ruleCall,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		// TODO Auto-generated method stub
		super.complete_Panel(model, ruleCall, context, acceptor);
		for(String panel : panels) {
			String proposal = panel.toLowerCase() + " com.izforge.izpack.panels." + panel + " \"bin/panels/" + panel + ".jar\"";
			acceptor.accept(this.createCompletionProposal(proposal, panel, null, context));
			
		}
	}


}
