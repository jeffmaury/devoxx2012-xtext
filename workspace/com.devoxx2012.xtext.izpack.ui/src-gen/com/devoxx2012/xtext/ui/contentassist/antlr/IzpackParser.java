/*
* generated by Xtext
*/
package com.devoxx2012.xtext.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.devoxx2012.xtext.services.IzpackGrammarAccess;

public class IzpackParser extends AbstractContentAssistParser {
	
	@Inject
	private IzpackGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.devoxx2012.xtext.ui.contentassist.antlr.internal.InternalIzpackParser createParser() {
		com.devoxx2012.xtext.ui.contentassist.antlr.internal.InternalIzpackParser result = new com.devoxx2012.xtext.ui.contentassist.antlr.internal.InternalIzpackParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getInstallerAccess().getAlternatives_4_1(), "rule__Installer__Alternatives_4_1");
					put(grammarAccess.getVariableAccess().getAlternatives_0(), "rule__Variable__Alternatives_0");
					put(grammarAccess.getJvmTypeReferenceAccess().getAlternatives(), "rule__JvmTypeReference__Alternatives");
					put(grammarAccess.getJvmArgumentTypeReferenceAccess().getAlternatives(), "rule__JvmArgumentTypeReference__Alternatives");
					put(grammarAccess.getJvmWildcardTypeReferenceAccess().getAlternatives_2(), "rule__JvmWildcardTypeReference__Alternatives_2");
					put(grammarAccess.getJvmTypeParameterAccess().getAlternatives_1(), "rule__JvmTypeParameter__Alternatives_1");
					put(grammarAccess.getISO3CodeAccess().getAlternatives(), "rule__ISO3Code__Alternatives");
					put(grammarAccess.getOSAccess().getAlternatives(), "rule__OS__Alternatives");
					put(grammarAccess.getOverrideFlagAccess().getAlternatives(), "rule__OverrideFlag__Alternatives");
					put(grammarAccess.getInstallerAccess().getGroup(), "rule__Installer__Group__0");
					put(grammarAccess.getInstallerAccess().getGroup_2(), "rule__Installer__Group_2__0");
					put(grammarAccess.getInstallerAccess().getGroup_3(), "rule__Installer__Group_3__0");
					put(grammarAccess.getInstallerAccess().getGroup_4(), "rule__Installer__Group_4__0");
					put(grammarAccess.getInstallerAccess().getGroup_5(), "rule__Installer__Group_5__0");
					put(grammarAccess.getLocaleAccess().getGroup(), "rule__Locale__Group__0");
					put(grammarAccess.getIdentificationAccess().getGroup(), "rule__Identification__Group__0");
					put(grammarAccess.getIdentificationAccess().getGroup_3(), "rule__Identification__Group_3__0");
					put(grammarAccess.getIdentificationAccess().getGroup_4(), "rule__Identification__Group_4__0");
					put(grammarAccess.getAuthorAccess().getGroup(), "rule__Author__Group__0");
					put(grammarAccess.getConstraintAccess().getGroup(), "rule__Constraint__Group__0");
					put(grammarAccess.getUninstallAccess().getGroup(), "rule__Uninstall__Group__0");
					put(grammarAccess.getUninstallAccess().getGroup_0(), "rule__Uninstall__Group_0__0");
					put(grammarAccess.getUninstallAccess().getGroup_1(), "rule__Uninstall__Group_1__0");
					put(grammarAccess.getOptionAccess().getGroup(), "rule__Option__Group__0");
					put(grammarAccess.getPackagingAccess().getGroup(), "rule__Packaging__Group__0");
					put(grammarAccess.getPackagingAccess().getGroup_2(), "rule__Packaging__Group_2__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getPackAccess().getGroup(), "rule__Pack__Group__0");
					put(grammarAccess.getPackAccess().getGroup_8(), "rule__Pack__Group_8__0");
					put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
					put(grammarAccess.getFileAccess().getGroup_1(), "rule__File__Group_1__0");
					put(grammarAccess.getFileAccess().getGroup_4(), "rule__File__Group_4__0");
					put(grammarAccess.getFileAccess().getGroup_5(), "rule__File__Group_5__0");
					put(grammarAccess.getFileAccess().getGroup_5_0(), "rule__File__Group_5_0__0");
					put(grammarAccess.getPanelAccess().getGroup(), "rule__Panel__Group__0");
					put(grammarAccess.getJvmTypeReferenceAccess().getGroup_0(), "rule__JvmTypeReference__Group_0__0");
					put(grammarAccess.getJvmTypeReferenceAccess().getGroup_0_1(), "rule__JvmTypeReference__Group_0_1__0");
					put(grammarAccess.getJvmTypeReferenceAccess().getGroup_0_1_0(), "rule__JvmTypeReference__Group_0_1_0__0");
					put(grammarAccess.getXFunctionTypeRefAccess().getGroup(), "rule__XFunctionTypeRef__Group__0");
					put(grammarAccess.getXFunctionTypeRefAccess().getGroup_0(), "rule__XFunctionTypeRef__Group_0__0");
					put(grammarAccess.getXFunctionTypeRefAccess().getGroup_0_1(), "rule__XFunctionTypeRef__Group_0_1__0");
					put(grammarAccess.getXFunctionTypeRefAccess().getGroup_0_1_1(), "rule__XFunctionTypeRef__Group_0_1_1__0");
					put(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup(), "rule__JvmParameterizedTypeReference__Group__0");
					put(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1(), "rule__JvmParameterizedTypeReference__Group_1__0");
					put(grammarAccess.getJvmParameterizedTypeReferenceAccess().getGroup_1_2(), "rule__JvmParameterizedTypeReference__Group_1_2__0");
					put(grammarAccess.getJvmWildcardTypeReferenceAccess().getGroup(), "rule__JvmWildcardTypeReference__Group__0");
					put(grammarAccess.getJvmUpperBoundAccess().getGroup(), "rule__JvmUpperBound__Group__0");
					put(grammarAccess.getJvmUpperBoundAndedAccess().getGroup(), "rule__JvmUpperBoundAnded__Group__0");
					put(grammarAccess.getJvmLowerBoundAccess().getGroup(), "rule__JvmLowerBound__Group__0");
					put(grammarAccess.getJvmTypeParameterAccess().getGroup(), "rule__JvmTypeParameter__Group__0");
					put(grammarAccess.getJvmTypeParameterAccess().getGroup_1_0(), "rule__JvmTypeParameter__Group_1_0__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getInstallerAccess().getIdentificationAssignment_1(), "rule__Installer__IdentificationAssignment_1");
					put(grammarAccess.getInstallerAccess().getAuthorsAssignment_2_1(), "rule__Installer__AuthorsAssignment_2_1");
					put(grammarAccess.getInstallerAccess().getConstraintAssignment_3_1(), "rule__Installer__ConstraintAssignment_3_1");
					put(grammarAccess.getInstallerAccess().getUninstallAssignment_4_1_1(), "rule__Installer__UninstallAssignment_4_1_1");
					put(grammarAccess.getInstallerAccess().getSummarylogAssignment_5_1(), "rule__Installer__SummarylogAssignment_5_1");
					put(grammarAccess.getInstallerAccess().getInstallationAssignment_5_2(), "rule__Installer__InstallationAssignment_5_2");
					put(grammarAccess.getInstallerAccess().getPackagingAssignment_6(), "rule__Installer__PackagingAssignment_6");
					put(grammarAccess.getInstallerAccess().getVariablesAssignment_7(), "rule__Installer__VariablesAssignment_7");
					put(grammarAccess.getInstallerAccess().getPacksAssignment_8(), "rule__Installer__PacksAssignment_8");
					put(grammarAccess.getInstallerAccess().getLocaleAssignment_9(), "rule__Installer__LocaleAssignment_9");
					put(grammarAccess.getInstallerAccess().getPanelsAssignment_11(), "rule__Installer__PanelsAssignment_11");
					put(grammarAccess.getLocaleAccess().getIsocodesAssignment_1(), "rule__Locale__IsocodesAssignment_1");
					put(grammarAccess.getIdentificationAccess().getNameAssignment_1(), "rule__Identification__NameAssignment_1");
					put(grammarAccess.getIdentificationAccess().getVersionAssignment_2(), "rule__Identification__VersionAssignment_2");
					put(grammarAccess.getIdentificationAccess().getUrlAssignment_3_1(), "rule__Identification__UrlAssignment_3_1");
					put(grammarAccess.getIdentificationAccess().getWebdirAssignment_4_1(), "rule__Identification__WebdirAssignment_4_1");
					put(grammarAccess.getAuthorAccess().getNameAssignment_0(), "rule__Author__NameAssignment_0");
					put(grammarAccess.getAuthorAccess().getEmailAssignment_1(), "rule__Author__EmailAssignment_1");
					put(grammarAccess.getConstraintAccess().getJavaversionAssignment_0(), "rule__Constraint__JavaversionAssignment_0");
					put(grammarAccess.getConstraintAccess().getRequiredJdkAssignment_1(), "rule__Constraint__RequiredJdkAssignment_1");
					put(grammarAccess.getConstraintAccess().getPackedAssignment_2(), "rule__Constraint__PackedAssignment_2");
					put(grammarAccess.getUninstallAccess().getNameAssignment_0_1(), "rule__Uninstall__NameAssignment_0_1");
					put(grammarAccess.getUninstallAccess().getPathAssignment_1_1(), "rule__Uninstall__PathAssignment_1_1");
					put(grammarAccess.getOptionAccess().getNameAssignment_0(), "rule__Option__NameAssignment_0");
					put(grammarAccess.getOptionAccess().getValueAssignment_2(), "rule__Option__ValueAssignment_2");
					put(grammarAccess.getPackagingAccess().getClassAssignment_1(), "rule__Packaging__ClassAssignment_1");
					put(grammarAccess.getPackagingAccess().getOptionsAssignment_2_1(), "rule__Packaging__OptionsAssignment_2_1");
					put(grammarAccess.getVariableAccess().getIsDynamicAssignment_0_1(), "rule__Variable__IsDynamicAssignment_0_1");
					put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
					put(grammarAccess.getVariableAccess().getValueAssignment_3(), "rule__Variable__ValueAssignment_3");
					put(grammarAccess.getPackAccess().getNameAssignment_1(), "rule__Pack__NameAssignment_1");
					put(grammarAccess.getPackAccess().getLabelAssignment_2(), "rule__Pack__LabelAssignment_2");
					put(grammarAccess.getPackAccess().getOptionalAssignment_3(), "rule__Pack__OptionalAssignment_3");
					put(grammarAccess.getPackAccess().getLooseAssignment_4(), "rule__Pack__LooseAssignment_4");
					put(grammarAccess.getPackAccess().getKeepAssignment_5(), "rule__Pack__KeepAssignment_5");
					put(grammarAccess.getPackAccess().getParentAssignment_6(), "rule__Pack__ParentAssignment_6");
					put(grammarAccess.getPackAccess().getFilesAssignment_7(), "rule__Pack__FilesAssignment_7");
					put(grammarAccess.getPackAccess().getOsAssignment_8_1(), "rule__Pack__OsAssignment_8_1");
					put(grammarAccess.getFileAccess().getPathAssignment_0(), "rule__File__PathAssignment_0");
					put(grammarAccess.getFileAccess().getAliasAssignment_1_1(), "rule__File__AliasAssignment_1_1");
					put(grammarAccess.getFileAccess().getDestinationAssignment_3(), "rule__File__DestinationAssignment_3");
					put(grammarAccess.getFileAccess().getOverrideAssignment_4_1(), "rule__File__OverrideAssignment_4_1");
					put(grammarAccess.getFileAccess().getOsAssignment_5_0_1(), "rule__File__OsAssignment_5_0_1");
					put(grammarAccess.getPanelAccess().getNameAssignment_0(), "rule__Panel__NameAssignment_0");
					put(grammarAccess.getPanelAccess().getClassnameAssignment_1(), "rule__Panel__ClassnameAssignment_1");
					put(grammarAccess.getPanelAccess().getJarAssignment_2(), "rule__Panel__JarAssignment_2");
					put(grammarAccess.getXFunctionTypeRefAccess().getParamTypesAssignment_0_1_0(), "rule__XFunctionTypeRef__ParamTypesAssignment_0_1_0");
					put(grammarAccess.getXFunctionTypeRefAccess().getParamTypesAssignment_0_1_1_1(), "rule__XFunctionTypeRef__ParamTypesAssignment_0_1_1_1");
					put(grammarAccess.getXFunctionTypeRefAccess().getReturnTypeAssignment_2(), "rule__XFunctionTypeRef__ReturnTypeAssignment_2");
					put(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeAssignment_0(), "rule__JvmParameterizedTypeReference__TypeAssignment_0");
					put(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsAssignment_1_1(), "rule__JvmParameterizedTypeReference__ArgumentsAssignment_1_1");
					put(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsAssignment_1_2_1(), "rule__JvmParameterizedTypeReference__ArgumentsAssignment_1_2_1");
					put(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsAssignment_2_0(), "rule__JvmWildcardTypeReference__ConstraintsAssignment_2_0");
					put(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsAssignment_2_1(), "rule__JvmWildcardTypeReference__ConstraintsAssignment_2_1");
					put(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceAssignment_1(), "rule__JvmUpperBound__TypeReferenceAssignment_1");
					put(grammarAccess.getJvmUpperBoundAndedAccess().getTypeReferenceAssignment_1(), "rule__JvmUpperBoundAnded__TypeReferenceAssignment_1");
					put(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceAssignment_1(), "rule__JvmLowerBound__TypeReferenceAssignment_1");
					put(grammarAccess.getJvmTypeParameterAccess().getNameAssignment_0(), "rule__JvmTypeParameter__NameAssignment_0");
					put(grammarAccess.getJvmTypeParameterAccess().getConstraintsAssignment_1_0_0(), "rule__JvmTypeParameter__ConstraintsAssignment_1_0_0");
					put(grammarAccess.getJvmTypeParameterAccess().getConstraintsAssignment_1_0_1(), "rule__JvmTypeParameter__ConstraintsAssignment_1_0_1");
					put(grammarAccess.getJvmTypeParameterAccess().getConstraintsAssignment_1_1(), "rule__JvmTypeParameter__ConstraintsAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.devoxx2012.xtext.ui.contentassist.antlr.internal.InternalIzpackParser typedParser = (com.devoxx2012.xtext.ui.contentassist.antlr.internal.InternalIzpackParser) parser;
			typedParser.entryRuleInstaller();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public IzpackGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(IzpackGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
