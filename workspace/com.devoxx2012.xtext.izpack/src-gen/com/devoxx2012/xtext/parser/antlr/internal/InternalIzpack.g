/*
* generated by Xtext
*/
grammar InternalIzpack;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.devoxx2012.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.devoxx2012.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.devoxx2012.xtext.services.IzpackGrammarAccess;

}

@parser::members {

 	private IzpackGrammarAccess grammarAccess;
 	
    public InternalIzpackParser(TokenStream input, IzpackGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Installer";	
   	}
   	
   	@Override
   	protected IzpackGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleInstaller
entryRuleInstaller returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInstallerRule()); }
	 iv_ruleInstaller=ruleInstaller 
	 { $current=$iv_ruleInstaller.current; } 
	 EOF 
;

// Rule Installer
ruleInstaller returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='installer' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getInstallerAccess().getInstallerKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstallerAccess().getIdentificationIdentificationParserRuleCall_1_0()); 
	    }
		lv_identification_1_0=ruleIdentification		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstallerRule());
	        }
       		set(
       			$current, 
       			"identification",
        		lv_identification_1_0, 
        		"Identification");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='by' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getInstallerAccess().getByKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstallerAccess().getAuthorsAuthorParserRuleCall_2_1_0()); 
	    }
		lv_authors_3_0=ruleAuthor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstallerRule());
	        }
       		add(
       			$current, 
       			"authors",
        		lv_authors_3_0, 
        		"Author");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?(	otherlv_4='constraints' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getInstallerAccess().getConstraintsKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstallerAccess().getConstraintConstraintParserRuleCall_3_1_0()); 
	    }
		lv_constraint_5_0=ruleConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstallerRule());
	        }
       		set(
       			$current, 
       			"constraint",
        		lv_constraint_5_0, 
        		"Constraint");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_6='uninstall' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getInstallerAccess().getUninstallKeyword_4_0());
    }
(	otherlv_7='no' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getInstallerAccess().getNoKeyword_4_1_0());
    }

    |(
(
		{ 
	        newCompositeNode(grammarAccess.getInstallerAccess().getUninstallUninstallParserRuleCall_4_1_1_0()); 
	    }
		lv_uninstall_8_0=ruleUninstall		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstallerRule());
	        }
       		set(
       			$current, 
       			"uninstall",
        		lv_uninstall_8_0, 
        		"Uninstall");
	        afterParserOrEnumRuleCall();
	    }

)
)))?(	otherlv_9='log on' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getInstallerAccess().getLogOnKeyword_5_0());
    }
(
(
		lv_summarylog_10_0=RULE_STRING
		{
			newLeafNode(lv_summarylog_10_0, grammarAccess.getInstallerAccess().getSummarylogSTRINGTerminalRuleCall_5_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstallerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"summarylog",
        		lv_summarylog_10_0, 
        		"STRING");
	    }

)
)(
(
		lv_installation_11_0=	'write installation info' 
    {
        newLeafNode(lv_installation_11_0, grammarAccess.getInstallerAccess().getInstallationWriteInstallationInfoKeyword_5_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInstallerRule());
	        }
       		setWithLastConsumed($current, "installation", true, "write installation info");
	    }

)
)?)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInstallerAccess().getPackagingPackagingParserRuleCall_6_0()); 
	    }
		lv_packaging_12_0=rulePackaging		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstallerRule());
	        }
       		set(
       			$current, 
       			"packaging",
        		lv_packaging_12_0, 
        		"Packaging");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getInstallerAccess().getVariablesVariableParserRuleCall_7_0()); 
	    }
		lv_variables_13_0=ruleVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstallerRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_13_0, 
        		"Variable");
	        afterParserOrEnumRuleCall();
	    }

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getInstallerAccess().getPacksPackParserRuleCall_8_0()); 
	    }
		lv_packs_14_0=rulePack		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstallerRule());
	        }
       		add(
       			$current, 
       			"packs",
        		lv_packs_14_0, 
        		"Pack");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getInstallerAccess().getLocaleLocaleParserRuleCall_9_0()); 
	    }
		lv_locale_15_0=ruleLocale		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstallerRule());
	        }
       		set(
       			$current, 
       			"locale",
        		lv_locale_15_0, 
        		"Locale");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_16='display' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getInstallerAccess().getDisplayKeyword_10());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getInstallerAccess().getPanelsPanelParserRuleCall_11_0()); 
	    }
		lv_panels_17_0=rulePanel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInstallerRule());
	        }
       		add(
       			$current, 
       			"panels",
        		lv_panels_17_0, 
        		"Panel");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleLocale
entryRuleLocale returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLocaleRule()); }
	 iv_ruleLocale=ruleLocale 
	 { $current=$iv_ruleLocale.current; } 
	 EOF 
;

// Rule Locale
ruleLocale returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='locale' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getLocaleAccess().getLocaleKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLocaleAccess().getIsocodesISO3CodeEnumRuleCall_1_0()); 
	    }
		lv_isocodes_1_0=ruleISO3Code		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLocaleRule());
	        }
       		add(
       			$current, 
       			"isocodes",
        		lv_isocodes_1_0, 
        		"ISO3Code");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;





// Entry rule entryRuleIdentification
entryRuleIdentification returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdentificationRule()); }
	 iv_ruleIdentification=ruleIdentification 
	 { $current=$iv_ruleIdentification.current; } 
	 EOF 
;

// Rule Identification
ruleIdentification returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getIdentificationAccess().getForKeyword_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getIdentificationAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdentificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
)(
(
		lv_version_2_0=RULE_STRING
		{
			newLeafNode(lv_version_2_0, grammarAccess.getIdentificationAccess().getVersionSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdentificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"version",
        		lv_version_2_0, 
        		"STRING");
	    }

)
)(	otherlv_3='site' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getIdentificationAccess().getSiteKeyword_3_0());
    }
(
(
		lv_url_4_0=RULE_STRING
		{
			newLeafNode(lv_url_4_0, grammarAccess.getIdentificationAccess().getUrlSTRINGTerminalRuleCall_3_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdentificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"url",
        		lv_url_4_0, 
        		"STRING");
	    }

)
))?(	otherlv_5='webroot' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getIdentificationAccess().getWebrootKeyword_4_0());
    }
(
(
		lv_webdir_6_0=RULE_STRING
		{
			newLeafNode(lv_webdir_6_0, grammarAccess.getIdentificationAccess().getWebdirSTRINGTerminalRuleCall_4_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIdentificationRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"webdir",
        		lv_webdir_6_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleAuthor
entryRuleAuthor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAuthorRule()); }
	 iv_ruleAuthor=ruleAuthor 
	 { $current=$iv_ruleAuthor.current; } 
	 EOF 
;

// Rule Author
ruleAuthor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getAuthorAccess().getNameSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAuthorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)(
(
		lv_email_1_0=RULE_STRING
		{
			newLeafNode(lv_email_1_0, grammarAccess.getAuthorAccess().getEmailSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAuthorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"email",
        		lv_email_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleConstraint
entryRuleConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	 iv_ruleConstraint=ruleConstraint 
	 { $current=$iv_ruleConstraint.current; } 
	 EOF 
;

// Rule Constraint
ruleConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_javaversion_0_0=RULE_STRING
		{
			newLeafNode(lv_javaversion_0_0, grammarAccess.getConstraintAccess().getJavaversionSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstraintRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"javaversion",
        		lv_javaversion_0_0, 
        		"STRING");
	    }

)
)(
(
		lv_requiredJdk_1_0=	'with jdk' 
    {
        newLeafNode(lv_requiredJdk_1_0, grammarAccess.getConstraintAccess().getRequiredJdkWithJdkKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstraintRule());
	        }
       		setWithLastConsumed($current, "requiredJdk", true, "with jdk");
	    }

)
)?(
(
		lv_packed_2_0=	'packed' 
    {
        newLeafNode(lv_packed_2_0, grammarAccess.getConstraintAccess().getPackedPackedKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstraintRule());
	        }
       		setWithLastConsumed($current, "packed", true, "packed");
	    }

)
)?)
;





// Entry rule entryRuleUninstall
entryRuleUninstall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUninstallRule()); }
	 iv_ruleUninstall=ruleUninstall 
	 { $current=$iv_ruleUninstall.current; } 
	 EOF 
;

// Rule Uninstall
ruleUninstall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='named' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUninstallAccess().getNamedKeyword_0_0());
    }
(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getUninstallAccess().getNameSTRINGTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUninstallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
))?(	otherlv_2='path' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUninstallAccess().getPathKeyword_1_0());
    }
(
(
		lv_path_3_0=RULE_STRING
		{
			newLeafNode(lv_path_3_0, grammarAccess.getUninstallAccess().getPathSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUninstallRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"path",
        		lv_path_3_0, 
        		"STRING");
	    }

)
))?)
;





// Entry rule entryRuleOption
entryRuleOption returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOptionRule()); }
	 iv_ruleOption=ruleOption 
	 { $current=$iv_ruleOption.current; } 
	 EOF 
;

// Rule Option
ruleOption returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_STRING
		{
			newLeafNode(lv_name_0_0, grammarAccess.getOptionAccess().getNameSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"STRING");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOptionAccess().getEqualsSignKeyword_1());
    }
(
(
		lv_value_2_0=RULE_STRING
		{
			newLeafNode(lv_value_2_0, grammarAccess.getOptionAccess().getValueSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRulePackaging
entryRulePackaging returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackagingRule()); }
	 iv_rulePackaging=rulePackaging 
	 { $current=$iv_rulePackaging.current; } 
	 EOF 
;

// Rule Packaging
rulePackaging returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='packaging' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackagingAccess().getPackagingKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackagingAccess().getClassJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_class_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackagingRule());
	        }
       		set(
       			$current, 
       			"class",
        		lv_class_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='options' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackagingAccess().getOptionsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackagingAccess().getOptionsOptionParserRuleCall_2_1_0()); 
	    }
		lv_options_3_0=ruleOption		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackagingRule());
	        }
       		add(
       			$current, 
       			"options",
        		lv_options_3_0, 
        		"Option");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?)
;





// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	 iv_ruleVariable=ruleVariable 
	 { $current=$iv_ruleVariable.current; } 
	 EOF 
;

// Rule Variable
ruleVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='val' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getVariableAccess().getValKeyword_0_0());
    }

    |(
(
		lv_isDynamic_1_0=	'var' 
    {
        newLeafNode(lv_isDynamic_1_0, grammarAccess.getVariableAccess().getIsDynamicVarKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed($current, "isDynamic", true, "var");
	    }

)
))(
(
		lv_name_2_0=RULE_ID
		{
			newLeafNode(lv_name_2_0, grammarAccess.getVariableAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ID");
	    }

)
)	otherlv_3='=' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getVariableAccess().getEqualsSignKeyword_2());
    }
(
(
		lv_value_4_0=RULE_STRING
		{
			newLeafNode(lv_value_4_0, grammarAccess.getVariableAccess().getValueSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_4_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRulePack
entryRulePack returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackRule()); }
	 iv_rulePack=rulePack 
	 { $current=$iv_rulePack.current; } 
	 EOF 
;

// Rule Pack
rulePack returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='pack' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackAccess().getPackKeyword_0());
    }
(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getPackAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPackRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)(
(
		lv_label_2_0=RULE_STRING
		{
			newLeafNode(lv_label_2_0, grammarAccess.getPackAccess().getLabelSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPackRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"label",
        		lv_label_2_0, 
        		"STRING");
	    }

)
)(
(
		lv_optional_3_0=	'optional' 
    {
        newLeafNode(lv_optional_3_0, grammarAccess.getPackAccess().getOptionalOptionalKeyword_3_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPackRule());
	        }
       		setWithLastConsumed($current, "optional", true, "optional");
	    }

)
)?(
(
		lv_loose_4_0=	'loose' 
    {
        newLeafNode(lv_loose_4_0, grammarAccess.getPackAccess().getLooseLooseKeyword_4_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPackRule());
	        }
       		setWithLastConsumed($current, "loose", true, "loose");
	    }

)
)?(
(
		lv_keep_5_0=	'keep' 
    {
        newLeafNode(lv_keep_5_0, grammarAccess.getPackAccess().getKeepKeepKeyword_5_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPackRule());
	        }
       		setWithLastConsumed($current, "keep", true, "keep");
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getPackRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getPackAccess().getParentPackCrossReference_6_0()); 
	}

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getPackAccess().getFilesFileParserRuleCall_7_0()); 
	    }
		lv_files_7_0=ruleFile		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackRule());
	        }
       		add(
       			$current, 
       			"files",
        		lv_files_7_0, 
        		"File");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_8='on' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getPackAccess().getOnKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackAccess().getOsOSEnumRuleCall_8_1_0()); 
	    }
		lv_os_9_0=ruleOS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackRule());
	        }
       		set(
       			$current, 
       			"os",
        		lv_os_9_0, 
        		"OS");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	 iv_ruleFile=ruleFile 
	 { $current=$iv_ruleFile.current; } 
	 EOF 
;

// Rule File
ruleFile returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_path_0_0=RULE_STRING
		{
			newLeafNode(lv_path_0_0, grammarAccess.getFileAccess().getPathSTRINGTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFileRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"path",
        		lv_path_0_0, 
        		"STRING");
	    }

)
)(	otherlv_1='as' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFileAccess().getAsKeyword_1_0());
    }
(
(
		lv_alias_2_0=RULE_STRING
		{
			newLeafNode(lv_alias_2_0, grammarAccess.getFileAccess().getAliasSTRINGTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFileRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"alias",
        		lv_alias_2_0, 
        		"STRING");
	    }

)
))?	otherlv_3='to' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFileAccess().getToKeyword_2());
    }
(
(
		lv_destination_4_0=RULE_STRING
		{
			newLeafNode(lv_destination_4_0, grammarAccess.getFileAccess().getDestinationSTRINGTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFileRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"destination",
        		lv_destination_4_0, 
        		"STRING");
	    }

)
)(	otherlv_5='override' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFileAccess().getOverrideKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFileAccess().getOverrideOverrideFlagEnumRuleCall_4_1_0()); 
	    }
		lv_override_6_0=ruleOverrideFlag		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFileRule());
	        }
       		set(
       			$current, 
       			"override",
        		lv_override_6_0, 
        		"OverrideFlag");
	        afterParserOrEnumRuleCall();
	    }

)
))?(((	'on' 
(
(
ruleOS
)
)))=>(	otherlv_7='on' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getFileAccess().getOnKeyword_5_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFileAccess().getOsOSEnumRuleCall_5_0_1_0()); 
	    }
		lv_os_8_0=ruleOS		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFileRule());
	        }
       		set(
       			$current, 
       			"os",
        		lv_os_8_0, 
        		"OS");
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRulePanel
entryRulePanel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPanelRule()); }
	 iv_rulePanel=rulePanel 
	 { $current=$iv_rulePanel.current; } 
	 EOF 
;

// Rule Panel
rulePanel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getPanelAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPanelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPanelAccess().getClassnameJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_classname_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPanelRule());
	        }
       		set(
       			$current, 
       			"classname",
        		lv_classname_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_jar_2_0=RULE_STRING
		{
			newLeafNode(lv_jar_2_0, grammarAccess.getPanelAccess().getJarSTRINGTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPanelRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"jar",
        		lv_jar_2_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleJvmTypeReference
entryRuleJvmTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmTypeReferenceRule()); }
	 iv_ruleJvmTypeReference=ruleJvmTypeReference 
	 { $current=$iv_ruleJvmTypeReference.current; } 
	 EOF 
;

// Rule JvmTypeReference
ruleJvmTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0_0()); 
    }
    this_JvmParameterizedTypeReference_0=ruleJvmParameterizedTypeReference
    { 
        $current = $this_JvmParameterizedTypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)	'[' 
	']' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0(),
            $current);
    }
)	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getJvmTypeReferenceAccess().getLeftSquareBracketKeyword_0_1_0_1());
    }
	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJvmTypeReferenceAccess().getRightSquareBracketKeyword_0_1_0_2());
    }
))*)
    |
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getXFunctionTypeRefParserRuleCall_1()); 
    }
    this_XFunctionTypeRef_4=ruleXFunctionTypeRef
    { 
        $current = $this_XFunctionTypeRef_4.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXFunctionTypeRef
entryRuleXFunctionTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXFunctionTypeRefRule()); }
	 iv_ruleXFunctionTypeRef=ruleXFunctionTypeRef 
	 { $current=$iv_ruleXFunctionTypeRef.current; } 
	 EOF 
;

// Rule XFunctionTypeRef
ruleXFunctionTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_0_0()); 
	    }
		lv_paramTypes_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		lv_paramTypes_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXFunctionTypeRefAccess().getCommaKeyword_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_1_1_0()); 
	    }
		lv_paramTypes_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		lv_paramTypes_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2());
    }
)?	otherlv_5='=>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getXFunctionTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getReturnTypeJvmTypeReferenceParserRuleCall_2_0()); 
	    }
		lv_returnType_6_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_6_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmParameterizedTypeReference
entryRuleJvmParameterizedTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceRule()); }
	 iv_ruleJvmParameterizedTypeReference=ruleJvmParameterizedTypeReference 
	 { $current=$iv_ruleJvmParameterizedTypeReference.current; } 
	 EOF 
;

// Rule JvmParameterizedTypeReference
ruleJvmParameterizedTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_arguments_2_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
	    }
		lv_arguments_4_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleJvmArgumentTypeReference
entryRuleJvmArgumentTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceRule()); }
	 iv_ruleJvmArgumentTypeReference=ruleJvmArgumentTypeReference 
	 { $current=$iv_ruleJvmArgumentTypeReference.current; } 
	 EOF 
;

// Rule JvmArgumentTypeReference
ruleJvmArgumentTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmTypeReferenceParserRuleCall_0()); 
    }
    this_JvmTypeReference_0=ruleJvmTypeReference
    { 
        $current = $this_JvmTypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmWildcardTypeReferenceParserRuleCall_1()); 
    }
    this_JvmWildcardTypeReference_1=ruleJvmWildcardTypeReference
    { 
        $current = $this_JvmWildcardTypeReference_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJvmWildcardTypeReference
entryRuleJvmWildcardTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceRule()); }
	 iv_ruleJvmWildcardTypeReference=ruleJvmWildcardTypeReference 
	 { $current=$iv_ruleJvmWildcardTypeReference.current; } 
	 EOF 
;

// Rule JvmWildcardTypeReference
ruleJvmWildcardTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getJvmWildcardTypeReferenceAccess().getJvmWildcardTypeReferenceAction_0(),
            $current);
    }
)	otherlv_1='?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJvmWildcardTypeReferenceAccess().getQuestionMarkKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundParserRuleCall_2_0_0()); 
	    }
		lv_constraints_2_0=ruleJvmUpperBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_2_0, 
        		"JvmUpperBound");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundParserRuleCall_2_1_0()); 
	    }
		lv_constraints_3_0=ruleJvmLowerBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_3_0, 
        		"JvmLowerBound");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleJvmUpperBound
entryRuleJvmUpperBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmUpperBoundRule()); }
	 iv_ruleJvmUpperBound=ruleJvmUpperBound 
	 { $current=$iv_ruleJvmUpperBound.current; } 
	 EOF 
;

// Rule JvmUpperBound
ruleJvmUpperBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extends' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAccess().getExtendsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmUpperBoundRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmUpperBoundAnded
entryRuleJvmUpperBoundAnded returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmUpperBoundAndedRule()); }
	 iv_ruleJvmUpperBoundAnded=ruleJvmUpperBoundAnded 
	 { $current=$iv_ruleJvmUpperBoundAnded.current; } 
	 EOF 
;

// Rule JvmUpperBoundAnded
ruleJvmUpperBoundAnded returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='&' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAndedAccess().getAmpersandKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmUpperBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmUpperBoundAndedRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmLowerBound
entryRuleJvmLowerBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmLowerBoundRule()); }
	 iv_ruleJvmLowerBound=ruleJvmLowerBound 
	 { $current=$iv_ruleJvmLowerBound.current; } 
	 EOF 
;

// Rule JvmLowerBound
ruleJvmLowerBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='super' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmLowerBoundAccess().getSuperKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmLowerBoundRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }

    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIDRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); 
    }

    ;





// Rule ISO3Code
ruleISO3Code returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='Catalunyan' 
	{
        $current = grammarAccess.getISO3CodeAccess().getCatEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getISO3CodeAccess().getCatEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='Chinese' 
	{
        $current = grammarAccess.getISO3CodeAccess().getChnEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getISO3CodeAccess().getChnEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='Czech' 
	{
        $current = grammarAccess.getISO3CodeAccess().getCzeEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getISO3CodeAccess().getCzeEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='Danish' 
	{
        $current = grammarAccess.getISO3CodeAccess().getDanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getISO3CodeAccess().getDanEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='Galician' 
	{
        $current = grammarAccess.getISO3CodeAccess().getGlgEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getISO3CodeAccess().getGlgEnumLiteralDeclaration_4()); 
    }
)
    |(	enumLiteral_5='German' 
	{
        $current = grammarAccess.getISO3CodeAccess().getDeuEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getISO3CodeAccess().getDeuEnumLiteralDeclaration_5()); 
    }
)
    |(	enumLiteral_6='English' 
	{
        $current = grammarAccess.getISO3CodeAccess().getEngEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_6, grammarAccess.getISO3CodeAccess().getEngEnumLiteralDeclaration_6()); 
    }
)
    |(	enumLiteral_7='Basque' 
	{
        $current = grammarAccess.getISO3CodeAccess().getEusEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_7, grammarAccess.getISO3CodeAccess().getEusEnumLiteralDeclaration_7()); 
    }
)
    |(	enumLiteral_8='Finnish' 
	{
        $current = grammarAccess.getISO3CodeAccess().getFinEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_8, grammarAccess.getISO3CodeAccess().getFinEnumLiteralDeclaration_8()); 
    }
)
    |(	enumLiteral_9='French' 
	{
        $current = grammarAccess.getISO3CodeAccess().getFraEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_9, grammarAccess.getISO3CodeAccess().getFraEnumLiteralDeclaration_9()); 
    }
)
    |(	enumLiteral_10='Hungarian' 
	{
        $current = grammarAccess.getISO3CodeAccess().getHunEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_10, grammarAccess.getISO3CodeAccess().getHunEnumLiteralDeclaration_10()); 
    }
)
    |(	enumLiteral_11='Italian' 
	{
        $current = grammarAccess.getISO3CodeAccess().getItaEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_11, grammarAccess.getISO3CodeAccess().getItaEnumLiteralDeclaration_11()); 
    }
)
    |(	enumLiteral_12='Japanese' 
	{
        $current = grammarAccess.getISO3CodeAccess().getJpnEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_12, grammarAccess.getISO3CodeAccess().getJpnEnumLiteralDeclaration_12()); 
    }
)
    |(	enumLiteral_13='Malaysian' 
	{
        $current = grammarAccess.getISO3CodeAccess().getMysEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_13, grammarAccess.getISO3CodeAccess().getMysEnumLiteralDeclaration_13()); 
    }
)
    |(	enumLiteral_14='Nederlands' 
	{
        $current = grammarAccess.getISO3CodeAccess().getNedEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_14, grammarAccess.getISO3CodeAccess().getNedEnumLiteralDeclaration_14()); 
    }
)
    |(	enumLiteral_15='Norwegian' 
	{
        $current = grammarAccess.getISO3CodeAccess().getNorEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_15, grammarAccess.getISO3CodeAccess().getNorEnumLiteralDeclaration_15()); 
    }
)
    |(	enumLiteral_16='Polnish' 
	{
        $current = grammarAccess.getISO3CodeAccess().getPolEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_16, grammarAccess.getISO3CodeAccess().getPolEnumLiteralDeclaration_16()); 
    }
)
    |(	enumLiteral_17='Portuguese (Brazilian)' 
	{
        $current = grammarAccess.getISO3CodeAccess().getPorEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_17, grammarAccess.getISO3CodeAccess().getPorEnumLiteralDeclaration_17()); 
    }
)
    |(	enumLiteral_18='Portuguese (European)' 
	{
        $current = grammarAccess.getISO3CodeAccess().getPrtEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_18, grammarAccess.getISO3CodeAccess().getPrtEnumLiteralDeclaration_18()); 
    }
)
    |(	enumLiteral_19='Romanian' 
	{
        $current = grammarAccess.getISO3CodeAccess().getRomEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_19, grammarAccess.getISO3CodeAccess().getRomEnumLiteralDeclaration_19()); 
    }
)
    |(	enumLiteral_20='Russian' 
	{
        $current = grammarAccess.getISO3CodeAccess().getRusEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_20, grammarAccess.getISO3CodeAccess().getRusEnumLiteralDeclaration_20()); 
    }
)
    |(	enumLiteral_21='Serbian' 
	{
        $current = grammarAccess.getISO3CodeAccess().getScgEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_21, grammarAccess.getISO3CodeAccess().getScgEnumLiteralDeclaration_21()); 
    }
)
    |(	enumLiteral_22='Spanish' 
	{
        $current = grammarAccess.getISO3CodeAccess().getSpaEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_22, grammarAccess.getISO3CodeAccess().getSpaEnumLiteralDeclaration_22()); 
    }
)
    |(	enumLiteral_23='Slovakian' 
	{
        $current = grammarAccess.getISO3CodeAccess().getSvkEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_23, grammarAccess.getISO3CodeAccess().getSvkEnumLiteralDeclaration_23()); 
    }
)
    |(	enumLiteral_24='Swedish' 
	{
        $current = grammarAccess.getISO3CodeAccess().getSweEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_24, grammarAccess.getISO3CodeAccess().getSweEnumLiteralDeclaration_24()); 
    }
)
    |(	enumLiteral_25='Ukrainian' 
	{
        $current = grammarAccess.getISO3CodeAccess().getUkrEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_25, grammarAccess.getISO3CodeAccess().getUkrEnumLiteralDeclaration_25()); 
    }
));



// Rule OS
ruleOS returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='all' 
	{
        $current = grammarAccess.getOSAccess().getALLEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOSAccess().getALLEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='unix' 
	{
        $current = grammarAccess.getOSAccess().getUNIXEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOSAccess().getUNIXEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='windows' 
	{
        $current = grammarAccess.getOSAccess().getWINDOWSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOSAccess().getWINDOWSEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='mac' 
	{
        $current = grammarAccess.getOSAccess().getMACEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOSAccess().getMACEnumLiteralDeclaration_3()); 
    }
));



// Rule OverrideFlag
ruleOverrideFlag returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((	enumLiteral_0='true' 
	{
        $current = grammarAccess.getOverrideFlagAccess().getTRUEEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getOverrideFlagAccess().getTRUEEnumLiteralDeclaration_0()); 
    }
)
    |(	enumLiteral_1='false' 
	{
        $current = grammarAccess.getOverrideFlagAccess().getFALSEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getOverrideFlagAccess().getFALSEEnumLiteralDeclaration_1()); 
    }
)
    |(	enumLiteral_2='asktrue' 
	{
        $current = grammarAccess.getOverrideFlagAccess().getASKTRUEEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getOverrideFlagAccess().getASKTRUEEnumLiteralDeclaration_2()); 
    }
)
    |(	enumLiteral_3='askfalse' 
	{
        $current = grammarAccess.getOverrideFlagAccess().getASKFALSEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getOverrideFlagAccess().getASKFALSEEnumLiteralDeclaration_3()); 
    }
)
    |(	enumLiteral_4='update' 
	{
        $current = grammarAccess.getOverrideFlagAccess().getUpdateEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getOverrideFlagAccess().getUpdateEnumLiteralDeclaration_4()); 
    }
));



RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


